"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const readline_1 = require("readline");
const chalk_1 = __importDefault(require("chalk"));
const ChatBot_1 = require("./chathub/ChatBot");
const ora_1 = __importDefault(require("ora")); // Import the ora package
function getLine(prompt) {
    return __awaiter(this, void 0, void 0, function* () {
        const rl = (0, readline_1.createInterface)({
            input: process.stdin,
            output: process.stdout,
        });
        return new Promise((resolve) => {
            rl.question(prompt, (answer) => {
                rl.close();
                resolve(answer);
            });
        });
    });
}
function getPara(prompt) {
    return __awaiter(this, void 0, void 0, function* () {
        const rl = (0, readline_1.createInterface)({
            input: process.stdin,
            output: process.stdout,
        });
        process.stdin.on('keypress', (ch, key) => {
            if (key && key.alt && key.name === 'enter') {
                rl.close();
            }
        });
        const lines = [];
        let inputMode = true;
        console.log(prompt);
        return new Promise((resolve) => {
            rl.on('line', (line) => {
                if (inputMode) {
                    lines.push(line);
                }
            });
            rl.on('SIGINT', () => {
                inputMode = false;
                rl.close();
                resolve(lines.join('\n'));
            });
        });
    });
}
function main(args = {
    proxy: '',
    enterOnce: false,
    noStream: false,
    rich: true,
    style: null,
    wssLink: 'wss://sydney.bing.com/sydney/ChatHub',
    cookiePath: process.env.COOKIE_FILE || 'cookie.json',
}) {
    var _a, e_1, _b, _c, _d, e_2, _e, _f;
    return __awaiter(this, void 0, void 0, function* () {
        console.log('Initializing...');
        const bot = new ChatBot_1.Chatbot(args.cookiePath);
        yield bot.chatHubInitialization;
        console.log('Enter `alt+enter` or `control+C` to send a message');
        let question;
        while (true) {
            console.log('\nYou:');
            question = args.enterOnce ? yield getLine('') : yield getPara('');
            console.log();
            if (question === '!exit') {
                break;
            }
            if (question === '!help') {
                console.log(`
        !help - Show this help message
        !exit - Exit the program
        !reset - Reset the conversation
      `);
                continue;
            }
            if (question === '!reset') {
                yield bot.reset();
                continue;
            }
            console.log('Bot:');
            if (args.noStream) {
                const response = yield bot.ask(question, args.wssLink, args.style);
                if (typeof response === 'string' || !response) {
                    console.log(chalk_1.default.bold(response));
                }
                else {
                    console.log(response['item']['messages'][1]['adaptiveCards'][0]['body'][0]['text']);
                }
            }
            else {
                let wrote = 0;
                if (args.rich) {
                    const spinner = (0, ora_1.default)({ text: '', spinner: 'dots' }).start();
                    try {
                        for (var _g = true, _h = (e_1 = void 0, __asyncValues(bot.askStream(question, args.wssLink, args.style))), _j; _j = yield _h.next(), _a = _j.done, !_a;) {
                            _c = _j.value;
                            _g = false;
                            try {
                                const [final, response] = _c;
                                if (!final) {
                                    if (wrote > response.length) {
                                        console.log(chalk_1.default.red('***Bing revoked the response.***'));
                                    }
                                    wrote = response.length;
                                    spinner.text = String(response);
                                }
                            }
                            finally {
                                _g = true;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (!_g && !_a && (_b = _h.return)) yield _b.call(_h);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    spinner.stop();
                    console.log(chalk_1.default.yellow(spinner.text));
                }
                else {
                    try {
                        for (var _k = true, _l = (e_2 = void 0, __asyncValues(bot.askStream(question, args.wssLink, args.style))), _m; _m = yield _l.next(), _d = _m.done, !_d;) {
                            _f = _m.value;
                            _k = false;
                            try {
                                const [final, response] = _f;
                                if (!final) {
                                    process.stdout.write(response.slice(wrote));
                                    wrote = response.length;
                                }
                            }
                            finally {
                                _k = true;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (!_k && !_d && (_e = _l.return)) yield _e.call(_l);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    console.log();
                }
            }
        }
        yield bot.close();
    });
}
exports.main = main;
// main();
